{"version":3,"sources":["stores/UserStore.js","inputField.js","submitButton.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetFrom","alert","msg","console","log","setInputValue","doLogin","App","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8c61b657.chunk.js","sourcesContent":["import { extendObservable } from 'mobx';\n\nclass UserStore {\n  constructor() {\n    extendObservable(this, {\n      loading: true,\n      isLoggedIn: false,\n      username: ''\n    })\n  }\n}\n\nexport default new UserStore();\n","import React from 'react';\n\n\nclass InputField extends React.Component {\n  render() {\n    return (\n      <div className=\"InputField\">\n        <input\n          className='input'\n          type={this.props.type}\n          placeholder={this.props.placeholder}\n          value={this.props.value}\n          onChange={ (e) => this.props.onChange(e.target.value) }\n        />\n      </div>\n    );\n  }\n}\n\nexport default InputField;\n","import React from 'react';\n\n\nclass SubmitButton extends React.Component {\n  render() {\n    return (\n      <div className=\"SubmitButton\">\n        <button\n          className='btn'\n          disabled={this.props.disabled}\n          onClick={ () => this.props.onClick() }\n        >\n          {this.props.text}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default SubmitButton\n","import React from 'react';\nimport InputField from './inputField';\nimport SubmitButton from './submitButton';\nimport UserStore from './stores/UserStore';\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      buttonDisabled: false\n    }\n  }\n\n  setInputValue(property, val) {\n    val = val.trim();\n    if (val.length > 12) {\n      return;\n    }\n    this.setState({\n      [property]: val\n    })\n  }\n\n  resetFrom() {\n    this.setState({\n      username: '',\n      password: '',\n      buttonDisabled: false\n    })\n  }\n\n  async doLogin() {\n    if (!this.state.username) {\n      return;\n    }\n    if (!this.state.password) {\n      return;\n    }\n    this.setState({\n      buttonDisabled: true\n    })\n    try {\n      let res = await fetch('/login', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: this.state.username,\n          password: this.state.password\n        })\n      });\n      let result =await res.json();\n      if (result && result.success) {\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      }\n      else if (result && result.success === false) {\n        this.resetFrom();\n        alert(result.msg);\n      }\n    }\n    catch(e) {\n      console.log(e);\n      this.resetFrom();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"LoginForm\">\n        login\n        <InputField\n          type='text'\n          placeholder='Username'\n          value={this.state.username ? this.state.username : '' }\n          onChange={ (val) => this.setInputValue('username', val) }\n        />\n        <InputField\n          type='password'\n          placeholder='password'\n          value={this.state.password ? this.state.password : '' }\n          onChange={ (val) => this.setInputValue('password', val) }\n        />\n        <SubmitButton\n          text={'login'}\n          disabled={this.state.buttonDisabled}\n          onClick={ () => this.doLogin() }\n        />\n      </div>\n    );\n  }\n}\n\nexport default LoginForm;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport UserStore from './stores/UserStore';\nimport LoginForm from './LoginForm';\nimport SubmitButton from './submitButton';\nimport './App.css';\n\nclass App extends React.Component {\n  async componentDidMount(){\n    try {\n      let res = await fetch('/isLoggedIn', {\n        method: 'post',\n        headers: {\n          'accept': 'application/json',\n          'content-Type': 'application/json'\n        }\n      });\n\n      let result = await res.json();\n      if (result && result.success) {\n        UserStore.loading = false;\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      }\n      else {\n        UserStore.loading = false;\n        UserStore.isLoggedIn = false;\n      }\n    }\n\n    catch(e) {\n      UserStore.loading = false;\n      UserStore.isLoggedIn = false;\n    }\n  }\n\n  async doLogout(){\n    try {\n      let res = await fetch('/logout', {\n        method: 'post',\n        headers: {\n          'accept': 'application/json',\n          'content-Type': 'application/json'\n        }\n      });\n\n      let result = await res.json();\n      if (result && result.success) {\n        UserStore.isLoggedIn = false;\n        UserStore.username = '';\n      }\n    }\n\n    catch(e) {\n      console.log(e);\n    }\n  }\n\n\n  render() {\n\n    if (UserStore.loading) {\n      return (\n        <div className=\"app\">\n          <div className= 'container'>\n            Loading, please wait..\n          </div>\n        </div>\n      );\n    }\n\n    else {\n      if (UserStore.isLoggedIn) {\n        return (\n          <div className=\"app\">\n            <div className= 'container'>\n              Welcome {UserStore.username}\n              <SubmitButton\n                text={'log out'}\n                disabled={false}\n                onClick={ () => this.doLogout() }\n              />\n            </div>\n          </div>\n        )\n      }\n    }\n    return (\n      <div className=\"app\">\n         <div className= 'container'>\n\n          <LoginForm />\n         </div>\n      </div>\n    );\n  }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}